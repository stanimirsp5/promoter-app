// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using promotersapp.Contexts;

namespace promotersapp.Migrations
{
    [DbContext(typeof(PromoterDbContext))]
    partial class PromoterDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("promotersapp.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("promotersapp.Models.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("FirmId")
                        .HasColumnType("int")
                        .HasColumnName("FirmID");

                    b.Property<int>("PromoterId")
                        .HasColumnType("int")
                        .HasColumnName("PromoterID");

                    b.HasKey("Id");

                    b.HasIndex("FirmId");

                    b.HasIndex("PromoterId");

                    b.ToTable("Discussions");
                });

            modelBuilder.Entity("promotersapp.Models.Firm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,0)")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Firms");
                });

            modelBuilder.Entity("promotersapp.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("DiscussionId")
                        .HasColumnType("int")
                        .HasColumnName("DiscussionID");

                    b.Property<bool>("IsFirm")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<string>("Message1")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Message");

                    b.Property<bool?>("Notify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("promotersapp.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("FirmId")
                        .HasColumnType("int")
                        .HasColumnName("FirmID");

                    b.Property<bool?>("IsSubscribed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("PaymentCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("Id");

                    b.HasIndex("FirmId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("promotersapp.Models.Perk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("PerkName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Perks");
                });

            modelBuilder.Entity("promotersapp.Models.PerksToPromoter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("PerkId")
                        .HasColumnType("int")
                        .HasColumnName("PerkID");

                    b.Property<int>("PromoterId")
                        .HasColumnType("int")
                        .HasColumnName("PromoterID");

                    b.HasKey("Id");

                    b.HasIndex("PerkId");

                    b.HasIndex("PromoterId");

                    b.ToTable("PerksToPromoter");
                });

            modelBuilder.Entity("promotersapp.Models.PersonalDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("EyeColor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ForeignLanguage")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ForeignLanguage2")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ForeignLanguage3")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("MotherLanguage")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PromoterId")
                        .HasColumnType("int")
                        .HasColumnName("PromoterID");

                    b.HasKey("Id");

                    b.HasIndex("PromoterId");

                    b.ToTable("PersonalDetails");
                });

            modelBuilder.Entity("promotersapp.Models.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varbinary(1)");

                    b.Property<bool>("IsProfilePic")
                        .HasColumnType("bit");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("promotersapp.Models.Promoter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Middlename")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Promoters");
                });

            modelBuilder.Entity("promotersapp.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("FreeFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FreeTo")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsStatic")
                        .HasColumnType("bit")
                        .HasColumnName("isStatic");

                    b.Property<int>("PromoterId")
                        .HasColumnType("int")
                        .HasColumnName("PromoterID");

                    b.Property<int>("WeekDayId")
                        .HasColumnType("int")
                        .HasColumnName("WeekDayID");

                    b.HasKey("Id");

                    b.HasIndex("PromoterId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("promotersapp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("FailedLogins")
                        .HasColumnType("int");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int")
                        .HasColumnName("UserTypeID");

                    b.HasKey("Id");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("promotersapp.Models.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("UserTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("promotersapp.Models.WeekDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Weekday1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Weekday");

                    b.HasKey("Id");

                    b.ToTable("WeekDays");
                });

            modelBuilder.Entity("promotersapp.Models.Discussion", b =>
                {
                    b.HasOne("promotersapp.Models.Firm", "Firm")
                        .WithMany("Discussions")
                        .HasForeignKey("FirmId")
                        .HasConstraintName("FK_Discussions_To_Firms")
                        .IsRequired();

                    b.HasOne("promotersapp.Models.Promoter", "Promoter")
                        .WithMany("Discussions")
                        .HasForeignKey("PromoterId")
                        .HasConstraintName("FK_Discussions_To_Promoters")
                        .IsRequired();

                    b.Navigation("Firm");

                    b.Navigation("Promoter");
                });

            modelBuilder.Entity("promotersapp.Models.Firm", b =>
                {
                    b.HasOne("promotersapp.Models.City", "City")
                        .WithMany("Firms")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Firms_To_Cities")
                        .IsRequired();

                    b.HasOne("promotersapp.Models.User", "User")
                        .WithMany("Firms")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Firms_To_Users")
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("promotersapp.Models.Message", b =>
                {
                    b.HasOne("promotersapp.Models.Discussion", "Discussion")
                        .WithMany("Messages")
                        .HasForeignKey("DiscussionId")
                        .HasConstraintName("FK_Messages_To_Discussions")
                        .IsRequired();

                    b.Navigation("Discussion");
                });

            modelBuilder.Entity("promotersapp.Models.Payment", b =>
                {
                    b.HasOne("promotersapp.Models.Firm", "Firm")
                        .WithMany("Payments")
                        .HasForeignKey("FirmId")
                        .HasConstraintName("FK_Payments_To_Firms")
                        .IsRequired();

                    b.Navigation("Firm");
                });

            modelBuilder.Entity("promotersapp.Models.PerksToPromoter", b =>
                {
                    b.HasOne("promotersapp.Models.Perk", "Perk")
                        .WithMany("PerksToPromoters")
                        .HasForeignKey("PerkId")
                        .HasConstraintName("FK_PerksToPromoter_To_Perks")
                        .IsRequired();

                    b.HasOne("promotersapp.Models.Promoter", "Promoter")
                        .WithMany("PerksToPromoters")
                        .HasForeignKey("PromoterId")
                        .HasConstraintName("FK_PerksToPromoter_To_Promoters")
                        .IsRequired();

                    b.Navigation("Perk");

                    b.Navigation("Promoter");
                });

            modelBuilder.Entity("promotersapp.Models.PersonalDetail", b =>
                {
                    b.HasOne("promotersapp.Models.Promoter", "Promoter")
                        .WithMany("PersonalDetails")
                        .HasForeignKey("PromoterId")
                        .HasConstraintName("FK_PersonalDetails_To_Promoters")
                        .IsRequired();

                    b.Navigation("Promoter");
                });

            modelBuilder.Entity("promotersapp.Models.Picture", b =>
                {
                    b.HasOne("promotersapp.Models.User", "User")
                        .WithMany("Pictures")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Pictures_To_Users")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("promotersapp.Models.Promoter", b =>
                {
                    b.HasOne("promotersapp.Models.City", "City")
                        .WithMany("Promoters")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Promoters_To_Cities")
                        .IsRequired();

                    b.HasOne("promotersapp.Models.User", "User")
                        .WithMany("Promoters")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Promoters_To_Users")
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("promotersapp.Models.Schedule", b =>
                {
                    b.HasOne("promotersapp.Models.Promoter", "Promoter")
                        .WithMany("Schedules")
                        .HasForeignKey("PromoterId")
                        .HasConstraintName("FK_Schedules_To_Promoters")
                        .IsRequired();

                    b.HasOne("promotersapp.Models.WeekDay", "PromoterNavigation")
                        .WithMany("Schedules")
                        .HasForeignKey("PromoterId")
                        .HasConstraintName("FK_Schedules_To_WeekDays")
                        .IsRequired();

                    b.Navigation("Promoter");

                    b.Navigation("PromoterNavigation");
                });

            modelBuilder.Entity("promotersapp.Models.User", b =>
                {
                    b.HasOne("promotersapp.Models.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId")
                        .HasConstraintName("FK_Users_To_UserTypes")
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("promotersapp.Models.City", b =>
                {
                    b.Navigation("Firms");

                    b.Navigation("Promoters");
                });

            modelBuilder.Entity("promotersapp.Models.Discussion", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("promotersapp.Models.Firm", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("promotersapp.Models.Perk", b =>
                {
                    b.Navigation("PerksToPromoters");
                });

            modelBuilder.Entity("promotersapp.Models.Promoter", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("PerksToPromoters");

                    b.Navigation("PersonalDetails");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("promotersapp.Models.User", b =>
                {
                    b.Navigation("Firms");

                    b.Navigation("Pictures");

                    b.Navigation("Promoters");
                });

            modelBuilder.Entity("promotersapp.Models.UserType", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("promotersapp.Models.WeekDay", b =>
                {
                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
